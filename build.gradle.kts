plugins {
	kotlin("jvm") version "1.9.25"
	kotlin("plugin.spring") version "1.9.25"
	id("org.springframework.boot") version "3.3.4"
	id("io.spring.dependency-management") version "1.1.6"
	kotlin("plugin.jpa") version "1.9.25"
	jacoco
}

group = "com.bbgk"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom(configurations.annotationProcessor.get())
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0")
	compileOnly("org.projectlombok:lombok")
	runtimeOnly("com.h2database:h2")
	runtimeOnly("com.mysql:mysql-connector-j")
	annotationProcessor("org.projectlombok:lombok")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll("-Xjsr305=strict")
	}
}

tasks.withType<Test> {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.12" // JaCoCo 버전 설정
	// reportsDirectory = layout.buildDirectory.dir("reports/jacoco") // 기본 보고서 생성 디렉토리, Gradle Default 값
}

tasks.test {
	finalizedBy(tasks.jacocoTestReport) // 테스트 실행 후에 항상 보고서가 생성됨.
}
tasks.jacocoTestReport {
	dependsOn(tasks.test) // 보고서 생성 전에 테스트 실행이 선행되어야 함.
}
tasks.jacocoTestReport {
	reports {
		xml.required = false // 출력 형식 설정
		csv.required = false // 출력 형식 설정
		html.outputLocation = layout.buildDirectory.dir("jacocoHtml") // HTML jacoco 보고서 생성 디렉토리
	}
}
tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = "0.5".toBigDecimal() // 빌드 시 테스트 커버리지 제한 값 설정, 50% 이상이 테스트되지 않으면 실패
			}
		}

		rule { // 규칙은 여러 개 설정이 가능하다
			isEnabled = false // 규칙 비활성화
			element = "CLASS" // 클래스 단위로 규칙 적용
			includes = listOf("org.gradle.*") // org.gradler.* 과 같은 패턴을 가진 클래스에 대해 적용

			limit {
				counter = "LINE" // 라인 커버리지 대한 기준으로 설정
				value = "TOTALCOUNT" // 전체 라인 수를 기준
				maximum = "0.3".toBigDecimal() // 30% 이상이 테스트되지 않으면 실패
			}
		}
	}
}

tasks.test {
	extensions.configure(JacocoTaskExtension::class) {
		destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile // 테스트 실행 시 생성되는 커버리지 데이터 파일의 경로 지정
		// https://youtrack.jetbrains.com/issue/KTIJ-17783/False-positive-Val-cannot-be-reassigned-in-build.gradle.kts
		// 위 내용에서 Val cannot be reassigned 에러가 발생함. 이는 IDE에서만 발생하는 에러 같음
		classDumpDir = layout.buildDirectory.dir("jacoco/classpathdumps").get().asFile // 코드 커버리지 분석을 수행할 때 필요한 클래스 파일들을 저장하는 경로 지정
	}
}

tasks.test {
	configure<JacocoTaskExtension> {
		isEnabled = false // 설정 활성화 / 비활성화
		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile // 테스트 실행 시 생성되는 커버리지 데이터 파일의 경로 지정
		includes = emptyList() // 포함할 클래스 패턴 목록
		excludes = emptyList() // 제외할 클래스 패턴 목록
		excludeClassLoaders = emptyList() // 제외할 클래스 로더 목록
		isIncludeNoLocationClasses = false // 위치 정보가 없는 클래스 포함 여부
		sessionId = "<auto-generated value>" // JaCoCo 세션 ID
		isDumpOnExit = true // 테스트 종료 시 클래스 덤프 여부
		classDumpDir = null // 클래스 덤프 디렉토리 (null인 경우 덤프하지 않음)
		output = JacocoTaskExtension.Output.FILE // 출력 형식 (파일로 저장)
		address = "localhost" // JMX를 통해 연결할 주소
		port = 6300 // JMX를 통해 연결할 포트
		isJmx = false // JMX 활성화 여부
	}
}
